package com.landi.trainingdemo.pattern.proxy;

/**
 * 代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于结构型模式。
 * 在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。
 * 意图：为其他对象提供一种代理以控制对这个对象的访问。
 * 主要解决：在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，
 *          有些对象由于某些原因（比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），
 *          直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。
 * 何时使用：想在访问一个类时做一些控制。
 * 优点： 1、职责清晰。 2、高扩展性。 3、智能化。
 * 缺点： 1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。
 *        2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。
 *
 * 使用场景：按职责来划分，通常有以下使用场景： 1、远程代理。 2、虚拟代理。 3、Copy-on-Write 代理。
 *           4、保护代理。 5、Cache代理 6、防火墙（Firewall）代理 7、同步化（Synchronization）代理。
 *           8、智能引用（Smart Reference）代理。
 * 注意事项： 1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。
 *            2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。
 * 静态代理的缺点：
 * 1）代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了大量的代码重复。
 *  如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。

 * 2）代理对象只服务于一种类型的对象（单一职责原则），如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理
 *  在程序规模稍大时就无法胜任了。如上的代码是只为UserManager类的访问提供了代理，但是如果还要为其他类
 *  如Department类提供代理的话，就需要我们再次添加代理Department的代理类
 * Created by guoj on 2019/8/26.
 */

public class ProxyPatternDemo {
    public static void main(String[] args) {
        Image image = new ProxyImage("test_10mb.jpg");
        // 图像将从磁盘加载
        image.display();
        System.out.println("============");
        // 图像不需要从磁盘加载
        image.display();
        System.out.println("************代理多个接口************");

        System.out.println(image.showPathInfo());
    }
}
